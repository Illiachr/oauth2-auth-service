openapi: "3.0.2"
info:
  title: Auth API
  version: "1.0"
servers:
  - url: http://localhost:5000/api/v1/
    description: dev server
  - url: https://si-auth-serv.herokuapp.com/api/v1/users
    description: production server

components:
  schemas:
    User:
      type: object
      required:
        - "login"
        - "password"
      properties:
        login:
          type: string
          example: client-login
        password:
          type: string
          format: password
          example: passwd123

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: User not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User not found"
    AlreadyExists:
      description: User already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "User already exists"
    LoginPwdError:
      description: Username or password is incorrect
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Username or password is incorrect
    BadRequest:
      description: Body params not valid
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    InternalError:
      description: Internal error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Internal error
paths:
  /users:
    get:
      tags:
        - public
      description: get all users
      responses:
        "200":
          description: OK
  /registration:
    post:
      tags:
        - public
      summary: Create new user with credentials and return a JWT token
      operationId: registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/AlreadyExists"
        "500":
          $ref: "#/components/responses/InternalError"
  /login:
    post:
      tags:
        - public
      summary: Authenticate user credentials and return a JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: client-login
                password:
                  type: string
                  example: passwd123
      responses:
        "200":
          description: return JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          $ref: "#/components/responses/LoginPwdError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"

  /{userId}/change-login:
    patch:
      tags:
        - secure
      summary: change user login
      operationId: changeLogin
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newLogin:
                  type: string
                  example: new_login

      responses:
        "204":
          description: User login changed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          $ref: "#/components/responses/AlreadyExists"
        "500":
          $ref: "#/components/responses/InternalError"

  /{userId}/change-password:
    patch:
      tags:
        - secure
      summary: change user password
      operationId: changePwd
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: passwd123
                newPassword:
                  type: string
                  format: password
                  example: fMF3EmGWRua

      responses:
        "204":
          description: User password changed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
  /users/{userId}:
    get:
      tags:
        - public
      description: get the user by ID
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /{userId}/change-role:
    patch:
      tags:
        - secure
      summary: change user role, only for admin
      operationId: changeRole
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newRole:
                  type: string
                  example: operator
      responses:
        "204":
          description: User role changed successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "500":
          $ref: "#/components/responses/InternalError"
